version: '2.1'


networks:
  flatnet:
    external: true


volumes:
    prometheus_data: {}
    grafana_data: {}
    esdata:
      external:
        name: esdata
    fluentdata:
      external:
        name: fluentdata

services:

  prometheus:
    image: prom/prometheus:v2.0.0
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
    # restart: unless-stopped
    expose:
      - 9090
    networks:
      flatnet:
        aliases:
          - prometheus
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '-config.file=/etc/alertmanager/config.yml'
      - '-storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      flatnet:
        aliases:
          - alertmanager
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v0.15.0
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
  #    - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      flatnet:
        aliases:
          - nodeexporter
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: google/cadvisor:v0.28.2
    container_name: cadvisor
    volumes:
    #  - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    #  - /cgroup:/cgroup:ro
    restart: unless-stopped
    expose:
      - 8080
    networks:
      flatnet:
        aliases:
          - cadvisor
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:4.5.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      flatnet:
        aliases:
          - grafana
    labels:
      org.label-schema.group: "monitoring"

#  eschecker-front:
#    image: nginx:1
#    container_name: eschecker-front
#    volumes:
#      - ./eschecker/web:/usr/share/nginx/html:ro
#    expose:
#      - 80
#    networks:
#      - monitor-net

  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
    volumes:
      - ./caddy/:/etc/caddy/
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
    restart: unless-stopped
    networks:
      flatnet:
        aliases:
          - caddy
    labels:
      org.label-schema.group: "monitoring"

#  logspout:
#    build:
#      context: logspout-custom/
#    container_name: logspout
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
    #  - ROUTE_URIS="logstash+tcp://logstash:5000"
#      - DOCKER_LABELS=true
#      - LOGSTASH_TAGS="docker"
#      - RETRY_STARTUP=true
#      - EXCLUDE_LABEL="org.label-schema.group:monitoring"
#    command: logstash+tcp://logstash:5000
#    depends_on:
#      - logstash
#    networks:
#      - elk
#    labels:
#      org.label-schema.group: "monitoring"

  fluentd:
    build:
      context: fluentd
#    image: fluent/fluentd:stable
    container_name: fluentd
    volumes:
      - /var/log:/var/hostlog
      - fluentdata:/fluentd/log
      - ./fluentd/etc:/fluentd/etc
    environment:
      - FLUENTD_CONF=fluent.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - elasticsearch
    networks:
      flatnet:
        aliases:
          - fluentd
    labels:
      org.label-schema.group: "monitoring"

  #eschecker:
  #  build:
  #    context: eschecker/
  #  container_name: eschecker
  #  volumes:
  #    - ./eschecker/escheckerchecks:/escheckerchecks
  #    - ./eschecker/web:/eschecker/web
  #  depends_on:
  #    - elasticsearch
  #  networks:
  #    - elk
  #  environment:
  #    - SLEEPTIME=30


  #elastalert:
  #  build:
  #    context: elastalert/
  #  volumes:
  #    - ./elastalert/config/elastalert.yaml:/opt/elastalert/config/elastalert.yaml
  #    - ./elastalert/rules:/opt/elastalert/rules
  #    - ./elastalert/rule_templates:/opt/elastalert/rule_templates
  #  container_name: elastalert
  #  networks:
  #    - elk
  #  depends_on:
  #    - elasticsearch
  #  restart: on-failure

  elastalert:
    image: bitsensor/elastalert:latest
    volumes:
      - ./elastalert/config/elastalert.yaml:/opt/elastalert/config.yaml
      - ./elastalert/config/config.json:/opt/elastalert-server/config/config.json
      - ./elastalert/rules:/opt/elastalert/rules
      - ./elastalert/rule_templates:/opt/elastalert/rule_templates
    container_name: elastalert
    ports:
      - "3030:3030"
    networks:
      flatnet:
        aliases:
          - elastalert
    depends_on:
      - elasticsearch
    restart: on-failure

  filebeater:
    build:
      context: filebeater/
    container_name: filebeater
    volumes:
      - /var/log:/var/hostlog
    networks:
      flatnet:
        aliases:
          - filebeater

  metricbeater:
    build:
      context: metricbeater/
    container_name: metricbeater
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
  #    - /:/hostfs:ro
    networks:
      flatnet:
        aliases:
          - metricbeater


  elasticsearch:
    build:
      context: elasticsearch/
    container_name: elasticsearch
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - esdata:/usr/share/elasticsearch/data
  #  ports:
  #    - "9200:9200"
  #    - "9300:9300"
    expose:
      - 9200
      - 9300
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      flatnet:
        aliases:
          - elasticsearch
    labels:
      org.label-schema.group: "monitoring"

  servertje:
    image: nginx:latest
    container_name: servertje
    ports:
      - "8888:80"
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: http.access
    depends_on:
      - fluentd
    networks:
      flatnet:
        aliases:
          - servertje

  logstash:
    build:
      context: logstash/
    container_name: logstash
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      xpack.security.enabled: "false"
      LOGSPOUT: "ignore"
    networks:
      flatnet:
        aliases:
          - logstash
    depends_on:
      - elasticsearch
    labels:
      org.label-schema.group: "monitoring"

  kibana:
    build:
      context: kibana/
    container_name: kibana
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    networks:
      flatnet:
        aliases:
          - kibana
    labels:
      org.label-schema.group: "monitoring"

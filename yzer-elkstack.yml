version: '3.4'

# see also: http://www.blog.labouardy.com/monitor-swarm-cluster-with-tick-stack-slack/

# create the following direectories on the ceph storage:
# influxdb/meta
# influxdb/data
# chronograf
# kapacitor
# elasticsearch/data (owner uid 1000)

# upload the configs
# label the worker nodes
# build kibana: localhost/kibana-logtrail:6.1.1


configs:
  prometheus.yml:
    external: true
  alert.rules:
    external: true
  amconfig:
    external: true
  grafanadash1:
    external: true
  grafanadash2:
    external: true
  grafanadash3:
    external: true
  grafanadash4:
    external: true
  grafanadash5:
    external: true
  grafanadash6:
    external: true
  grafanadash7:
    external: true
  grafanads1:
    external: true
  grafanasetup:
    external: true
#  fluentdconf:
#    external: true
#  fluentboot:
#    external: true
  elastconf:
    external: true
#  esrepo:
#    external: true
  fbyaml:
    external: true
  telegraf-config:
    external: true
  kapacitor-config:
    external: true
  kbsetup:
    external: true
  kbyaml:
    external: true
  logtrailconfig:
    external: true
  necustomrun:
    external: true

networks:
  infra:
    driver: overlay
  traefik:
    external:
      name: traefik

volumes:
    prometheus_data:
      name: prometheusdata
    grafana_data:
      name: grafanadata
    esdata:
      name: esdata
    kapacitordata:
      name: kapacitordata
    chronografdata:
      name: chronografdata
#    fluentdata:
#      external:
#        name: fluentdata
    influxdbmeta:
        name: influxdbmeta
    influxdbdata:
        name: influxdbdata

services:
  traefik:
    image: traefik
    networks:
      - traefik
    command: --web --docker.swarmmode --docker.domain=lift --docker.watch --docker.endpoint=unix://var/run/docker.sock -l INFO
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

#  prometheus:
#    image: prom/prometheus:v2.0.0
#    configs:
#      - source: prometheus.yml
#        target: /etc/prometheus/prometheus.yml
#        mode: 0644
#      - source: alert.rules
#        target: /etc/prometheus/alert.rules
#        mode: 0644
#    volumes:
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--storage.tsdb.retention=200h'
#    networks:
#      - infra
#      - traefik
#    labels:
#      org.label-schema.group: "monitoring"
#    deploy:
#      replicas: 1
#      placement:
#        constraints:
#          - node.role == worker
#      labels:
#        - "traefik.port=9090"
#        - "traefik.docker.network=traefik"
#        - "traefik.backend=prometheus"
#        - "traefik.backend.loadbalancer.method=wrr"
#        - "traefik.enable=true"
#        - "traefik.frontend.entryPoints=http"
#        - "traefik.frontend.rule=Host:prometheus.lift"

#  alertmanager:
#    image: prom/alertmanager
#    configs:
#      - source: amconfig
#        target: /etc/alertmanager/config.yml
#        mode: 0644
#    command:
#      - '--config.file=/etc/alertmanager/config.yml'
#      - '--storage.path=/alertmanager'
#    networks:
#      - infra
#      - traefik
#    labels:
#      org.label-schema.group: "monitoring"
#    deploy:
#      replicas: 1
#      placement:
#        constraints:
#          - node.role == worker
#      labels:
#        - "org.label-schema.group=monitoring"
#        - "traefik.port=9093"
#        - "traefik.docker.network=traefik"
#        - "traefik.backend=alertmanager"
#        - "traefik.backend.loadbalancer.method=wrr"
#        - "traefik.enable=true"
#        - "traefik.frontend.entryPoints=http"
#        - "traefik.frontend.rule=Host:alertmanager.lift"

# deprecated in favor of telegraf
#  docker-exporter:
#    image: basi/socat:${DOCKER_EXPORTER_VERSION:-v0.1.0}
#    networks:
#      - infra
#    deploy:
#      mode: global
#      resources:
#        limits:
#          cpus: '0.05'
#          memory: 6M
#        reservations:
#          cpus: '0.05'
#          memory: 4M

# deprecated in favor of telegraf
#  nodeexporter:
#    image: stefanprodan/swarmprom-node-exporter
#    configs:
#      - source: necustomrun
#        target: /customrun.sh
#        mode: 0755
#    networks:
#      - infra
#    environment:
#      - NODE_ID={{.Node.ID}}
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#      - /etc/hostname:/etc/nodename
#    entrypoint:
#      - /customrun.sh
#    command:
#      - '-collector.textfile.directory=/etc/node-exporter/'
#      - '-collector.procfs=/host/proc'
#      - '-collector.sysfs=/host/sys'
#      - '-collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#      - '-collectors.enabled=textfile,conntrack,diskstats,entropy,filefd,filesystem,loadavg,mdadm,meminfo,netdev,netstat,stat,time,vmstat'
#    deploy:
#      mode: global

# deprecated in favor of telegraf
#  cadvisor:
#    image: google/cadvisor:v0.28.3
#    deploy:
#      mode: global
#      resources:
#        limits:
#          cpus: '0.20'
#          memory: '128M'
#        reservations:
#          cpus: '0.20'
#          memory: '64M'
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
  #    - /cgroup:/cgroup:ro
  #  restart: unless-stopped
#    ports:
#      - "8080"
#    networks:
#      - infra
#    labels:
#      org.label-schema.group: "monitoring"

# deprecated in favor of chronograf
#  grafana:
#    image: grafana/grafana:4.6.0
#    configs:
#      - source: grafanadash1
#        target: /docker_containers.json
#        mode: 0644
#      - source: grafanadash2
#        target: /docker_host.json
#        mode: 0644
#      - source: grafanadash3
#        target: /monitor_services.json
#        mode: 0644
#      - source: grafanadash4
#        target: /nginx_container.json
#        mode: 0644
#      - source: grafanadash5
#        target: /nodes_dash.json
#        mode: 0644
#      - source: grafanadash6
#        target: /prometheus_dash.json
#        mode: 0644
#      - source: grafanadash7
#        target: /services_dash.json
#        mode: 0644
#      - source: grafanads1
#        target: /Prometheus.json
#        mode: 0644
#      - source: grafanasetup
#        target: /setup.sh
#        mode: 0755
#    volumes:
#      - grafana_data:/var/lib/grafana
#    entrypoint: /setup.sh
#    environment:
#      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
#      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
#      - GF_USERS_ALLOW_SIGN_UP=false
#    networks:
#      - infra
#      - traefik
#    deploy:
#      replicas: 1
#      placement:
#        constraints:
#          - node.role == worker
#      labels:
#        - "traefik.port=3000"
#        - "traefik.docker.network=traefik"
#        - "traefik.backend=grafana"
#        - "traefik.backend.loadbalancer.method=wrr"
#        - "traefik.enable=true"
#        - "traefik.frontend.entryPoints=http"
#        - "traefik.frontend.rule=Host:grafana.lift"

#  unsee:
#    image: cloudflare/unsee:v0.8.0
#    networks:
#      - traefik
#      - infra
#    environment:
#      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
#    deploy:
#      mode: replicated
#      replicas: 1
#      labels:
#        - "traefik.port=8080"
#        - "traefik.docker.network=traefik"
#        - "traefik.backend=unsee"
#        - "traefik.backend.loadbalancer.method=wrr"
#        - "traefik.enable=true"
#        - "traefik.frontend.entryPoints=http"
#        - "traefik.frontend.rule=Host:unsee.lift"
#        - "traefik.http.frontend.entryPoints=http"
#        - "traefik.http.port=80"

#  eschecker-front:
#    image: nginx:1
#    container_name: eschecker-front
#    volumes:
#      - ./eschecker/web:/usr/share/nginx/html:ro
#    expose:
#      - 80
#    networks:
#      - monitor-net

#  caddy:
#    image: stefanprodan/caddy
#    ports:
#      - "3000:3000"
#      - "9090:9090"
#      - "9093:9093"
#    volumes:
#      - ./caddy/:/etc/caddy/
#    environment:
#      - ADMIN_USER=${ADMIN_USER:-admin}
#      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #  restart: unless-stopped
#    networks:
#      - monitor-net
#      - elk
#    labels:
#      org.label-schema.group: "monitoring"

#  logspout:
#    build:
#      context: logspout-custom/
#    container_name: logspout
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    environment:
    #  - ROUTE_URIS="logstash+tcp://logstash:5000"
#      - DOCKER_LABELS=true
#      - LOGSTASH_TAGS="docker"
#      - RETRY_STARTUP=true
#      - EXCLUDE_LABEL="org.label-schema.group:monitoring"
#    command: logstash+tcp://logstash:5000
#    depends_on:
#      - logstash
#    networks:
#      - elk
#    labels:
#      org.label-schema.group: "monitoring"

# Not yet ready
#  fluentd:
#    image: fluent/fluentd:stable
#    deploy:
#      mode: global
#    configs:
#      - source: fluentdconf
#        target: /fluentd/etc/fluent.conf
#        mode: 0644
#      - source: fluentboot
#        target: /startup.sh
#        mode: 0755
#    volumes:
#      - /var/log:/var/hostlog
#      - fluentdata:/fluentd/log
#    environment:
#      - FLUENTD_CONF=fluent.conf
#    ports:
#      - "24224:24224"
#      - "24224:24224/udp"
#    depends_on:
#      - elasticsearch
#    networks:
#      - elk
#    labels:
#      org.label-schema.group: "monitoring"
#    entrypoint: /startup.sh

  #eschecker:
  #  build:
  #    context: eschecker/
  #  container_name: eschecker
  #  volumes:
  #    - ./eschecker/escheckerchecks:/escheckerchecks
  #    - ./eschecker/web:/eschecker/web
  #  depends_on:
  #    - elasticsearch
  #  networks:
  #    - elk
  #  environment:
  #    - SLEEPTIME=30


  #elastalert:
  #  build:
  #    context: elastalert/
  #  volumes:
  #    - ./elastalert/config/elastalert.yaml:/opt/elastalert/config/elastalert.yaml
  #    - ./elastalert/rules:/opt/elastalert/rules
  #    - ./elastalert/rule_templates:/opt/elastalert/rule_templates
  #  container_name: elastalert
  #  networks:
  #    - elk
  #  depends_on:
  #    - elasticsearch
  #  restart: on-failure
#
#   elastalert:
#     image: bitsensor/elastalert:latest
#     volumes:
#       - ./elastalert/config/elastalert.yaml:/opt/elastalert/config.yaml
#       - ./elastalert/config/config.json:/opt/elastalert-server/config/config.json
#       - ./elastalert/rules:/opt/elastalert/rules
#       - ./elastalert/rule_templates:/opt/elastalert/rule_templates
#     container_name: elastalert
#     ports:
#       - "3030:3030"
#     networks:
#       - elk
#     depends_on:
#       - elasticsearch
#     restart: on-failure
#

#  scope-launcher:
#    image: weaveworks/scope-swarm-launcher
#    command: scope launch
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    deploy:
#      mode: global
#      restart_policy:
#          condition: none

#  scope:
#    image: weaveworks/scope:1.6.5
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    deploy:
#      mode: global
#    ports:
#      - "4040:4040"
#    depends_on:
#      - scope-launcher

  filebeater:
    image: docker.elastic.co/beats/filebeat:6.1.1
    deploy:
      mode: global
    configs:
      - source: fbyaml
        target: /etc/filebeat.yml
        mode: 0644
    command: -c /etc/filebeat.yml -e
    user: root
    volumes:
      - /var/log:/var/hostlog:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
     - infra
    depends_on:
     - elasticsearch

  telegraf:
    image: telegraf:1.5
    networks:
      - infra
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: telegraf-config
        target: /etc/telegraf/telegraf.conf
    deploy:
      restart_policy:
        condition: on-failure
      mode: global

  influxdb:
    image: influxdb:1.4
    networks:
      - infra
    deploy:
      restart_policy:
        condition: on-failure
      replicas: 1
      placement:
        constraints:
          - stacktype == monitoring
    volumes:
      - influxdbmeta:/var/lib/influxdb/meta
      - influxdbdata:/var/lib/influxdb/data

  chronograf:
    image: chronograf:1.4
    networks:
      - infra
      - traefik
    volumes:
      - chronografdata:/var/lib/chronograf
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - stacktype == monitoring
      labels:
        - "traefik.port=8888"
        - "traefik.docker.network=traefik"
        - "traefik.backend=chronograf"
        - "traefik.backend.loadbalancer.method=wrr"
        - "traefik.enable=true"
        - "traefik.frontend.entryPoints=http"
        - "traefik.frontend.rule=Host:chronograf.lift"
#         - "traefik.http.frontend.entryPoints=http"
#         - "traefik.http.port=80"

  kapacitor:
    image: kapacitor:1.4
    networks:
      - infra
    volumes:
      - kapacitordata:/var/lib/kapacitor
    configs:
      - source: kapacitor-config
        target: /etc/kapacitor/kapacitor.conf
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - stacktype == monitoring

# no longer necessary with telegraf and kapacitor
#  metricbeater:
#    image: fedora:26
#    deploy:
#      mode: global
#    configs:
#      - source: esrepo
#        target: /etc/yum.repos.d/elastic.repo
#        mode: 0644
#      - source: mbyaml
#        target: /opt/metricbeat.yaml
#        mode: 0644
#      - source: mbsetup
#        target: /setup.sh
#        mode: 0755
#    entrypoint: /setup.sh
#    volumes:
#      - /proc:/hostfs/proc:ro
#      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#      - /:/hostfs:ro
#    networks:
#      - elk

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
    configs:
      - source: elastconf
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        mode: 0644
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200"
      - "9300"
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms256m"
    networks:
      - infra
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
          - purpose == data
#
#   servertje:
#     image: nginx:latest
#     container_name: servertje
#     ports:
#       - "8888:80"
#     logging:
#       driver: "fluentd"
#       options:
#         fluentd-address: localhost:24224
#         tag: http.access
#     depends_on:
#       - fluentd
#     networks:
#       - elk
#
#  logstash:
#    image: docker.elastic.co/logstash/logstash-oss:6.1.1
#    configs:
#      - source: lsconf
#        target: /usr/share/logstash/pipeline/logstash.conf
#        mode: 0644
#      - source: lsyaml
#        target: /usr/share/logstash/config/logstash.yml
#        mode: 0644
#      - source: lssetup
#        target: /setup.sh
#        mode: 0755
#    ports:
#      - "5000:5000"
#      - "5044:5044"
#    environment:
#      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#      xpack.security.enabled: "false"
#      LOGSPOUT: "ignore"
#    entrypoint: /setup.sh
#    depends_on:
#      - elasticsearch
#    networks:
#      - elk
#    labels:
#      org.label-schema.group: "monitoring"

#   logstash:
#     build:
#       context: logstash/
#     container_name: logstash
#     volumes:
#       - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
#       - ./logstash/pipeline:/usr/share/logstash/pipeline
#     ports:
#       - "5000:5000"
#       - "5044:5044"
#     environment:
#       LS_JAVA_OPTS: "-Xmx256m -Xms256m"
#       xpack.security.enabled: "false"
#       LOGSPOUT: "ignore"
#     networks:
#       - elk
#     depends_on:
#       - elasticsearch
#     labels:
#       org.label-schema.group: "monitoring"
#
  kibana:
    image: docker.elastic.co/kibana/kibana:6.1.1
    configs:
      - source: kbyaml
        target: /usr/share/kibana/config/kibana.yml
        mode: 0644
      - source: logtrailconfig
        target: /tmp/logtrailconf
        mode: 0644
      - source: kbsetup
        target: /setup.sh
        mode: 0755
#    ports:
#      - "5601"
    networks:
      - infra
      - traefik
    depends_on:
      - elasticsearch
    entrypoint: /setup.sh
    labels:
       org.label-schema.group: "monitoring"
    deploy:
      labels:
         - "traefik.port=5601"
         - "traefik.docker.network=traefik"
         - "traefik.backend=kibana"
         - "traefik.backend.loadbalancer.method=wrr"
         - "traefik.enable=true"
         - "traefik.frontend.entryPoints=http"
         - "traefik.frontend.rule=Host:kibana.lift"
      replicas: 1
      placement:
        constraints:
          - stacktype == monitoring
